@model telerik.Models.Book

@{
    var categories = (IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"];
    var parentCategories = categories.Where(c => c.ParentId == null).ToList();
    var allSubCategories = categories.Where(c => c.ParentId != null).ToList();
}


<script>
  function onUploadSuccess(e) {
    if (e.response && e.response.success) {
        const imageUrl = e.response.imageUrl;
        $("#coverImagePath").val(imageUrl);
    } else {
        console.error("Upload failed:", e.response.message || "Unknown error");
    }
}

</script>

<script>
    $(document).ready(function () {
        updateStatus();

        $('[name="Stock"]').on('input', updateStatus);

        var allSubCategories = @Html.Raw(Json.Serialize(allSubCategories.Select(c => new { c.Id, c.Name, c.ParentId })));

        $("#CategoryId").data("kendoDropDownList").bind("change", function () {
            var selectedId = this.value();
            var subCategory = $("#Genre").data("kendoDropDownList");

            var filtered = allSubCategories.filter(x => x.ParentId == parseInt(selectedId));

            subCategory.setDataSource(new kendo.data.DataSource({
                data: filtered
            }));

            subCategory.select(0);
        });
    });

        function updateStatus() {
        var stock = $('[name="Stock"]').val();
        var status = (parseInt(stock) > 0) ? "I disponueshëm" : "Jo i disponueshëm";
        $("#statusDisplay").text(status);
    }
</script>
<form enctype="multipart/form-data" class="k-edit-form-container">
    <div class="form-group">
        <label>Gjuha</label>
        @(Html.Kendo().DropDownListFor(m => m.CategoryId)
                .OptionLabel("Zgjidh Gjuhën")
                .DataTextField("Name")
                .DataValueField("Id")
                .BindTo(((IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"] ?? new List<telerik.Models.BookCategory>()).Where(c => c.ParentId == null))
                .HtmlAttributes(new { style = "width:100%" })
                )
    </div>

    <div class="form-group">
        <label>Zhanri</label>
        @(Html.Kendo().DropDownListFor(m => m.Genre)
                .OptionLabel("Zgjidh Zhanrin")
                .DataTextField("Name")
                .DataValueField("Name")
                .BindTo(new List<telerik.Models.BookCategory>())
                .HtmlAttributes(new { style = "width:100%" }))
    </div>

    <div class="form-group">
        <label>Titulli</label>
        @Html.TextBoxFor(m => m.Title, new { @class = "k-textbox", style = "width:100%" })
    </div>

    <div class="form-group">
        <label>Autori</label>
        @Html.TextBoxFor(m => m.Author, new { @class = "k-textbox", style = "width:100%" })
    </div>

    <div class="form-group">
        <label>Çmimi</label>
        @Html.TextBoxFor(m => m.Price, new { @class = "k-textbox", style = "width:100%" })
    </div>

    <div class="form-group">
        <label>Sasia</label>
        @Html.TextBoxFor(m => m.Stock, new { @class = "k-textbox", style = "width:100%" })
    </div>
 
    <div class="form-group">
        <label>Foto</label>
        @(Html.Kendo().Upload()
                .Name("file") // Must match IFormFile parameter
                .Async(a => a
                .Save("UploadImage", "Book") // Match the action name and controller
                .AutoUpload(true) // Upload immediately
                )
                .Events(e => e.Success("onUploadSuccess") // Handle the returned path
                )
                .Multiple(false)
                .ShowFileList(true)
                .HtmlAttributes(new { aria_label = "Upload cover image" })
                )
    </div>
    @Html.HiddenFor(m => m.CoverImage, new { id = "coverImagePath", name = "CoverImage" })


    <div class="form-group text-right">
        <button type="submit" class="k-button k-primary" onclick="submitForm(event)">Ruaj</button>
    </div>
</form>


<style>
    .k-edit-buttons{
        display: none;
    }
</style>
<script>
       function submitForm(event) {
        event.preventDefault();

        const bookData = {
            CategoryId: $("#CategoryId").data("kendoDropDownList").value(),
            Genre: $("#Genre").data("kendoDropDownList").value(),
            Title: $("input[name='Title']").val(),
            Author: $("input[name='Author']").val(),
            Price: $("input[name='Price']").val(),
            Stock: $("input[name='Stock']").val(),
            CoverImage: $("#coverImagePath").val()
        };

        console.log("Book data being sent:", bookData);

        $.ajax({
            url: '@Url.Action("CreateBook", "Book")',
            type: 'POST',
            data: bookData,
            success: function (response) {
                const grid = $("#bookGrid").data("kendoGrid");
                if (grid) grid.dataSource.read();

                const win = $(".k-window-content").data("kendoWindow");
                if (win) win.close();

                Swal.fire({
                    icon: "success",
                    title: "Sukses",
                    text: "Libri u ruajt me sukses!"
                });
            },
            error: function (xhr) {
                Swal.fire({
                    icon: "error",
                    title: "Gabim",
                    text: "Ndodhi një gabim gjatë ruajtjes."
                });
                console.error("Error saving book:", xhr.responseText);
            }
        });
    }

</script>
