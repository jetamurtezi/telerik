@(Html.Kendo().Grid<telerik.Models.Book>()
    .Name("bookGrid")
    .Columns(columns =>
    {
        columns.Bound(b => b.CoverImage)
            .Title("Foto")
            .ClientTemplate(
                "# if (CoverImage && CoverImage !== 'null') { #" +
                "<img src='#= CoverImage #' alt='Foto' style='max-height:60px;' />" +
                "# } else { #" +
                "<img src='/uploads/placeholder.png' alt='Foto' style='max-height:60px;' />" +
                "# } #")
            .Width(100);
        columns.Bound(b => b.Title).Title("Titulli");
        columns.Bound(b => b.Author).Title("Autori");
        columns.Bound(b => b.Genre).Title("Zhanri");
        columns.Bound(b => b.CategoryId)
            .Title("Gjuha")
            .ClientTemplate("#= getCategoryName(CategoryId) #");
        columns.Bound(b => b.Price).Title("Çmimi");
        columns.Bound(b => b.Stock).Title("Sasia");
        columns.Command(command =>
        {
            command.Edit().Text("Edito");
            command.Destroy().Text("Fshi");
        }).Title("Veprime").Width(180);
    })
    .ToolBar(toolbar => toolbar.Create().Text("Shto Libër"))
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("BookPopUp"))
    .Pageable()
    .Sortable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Model(model => {
            model.Id(b => b.Id); // Define the ID field
            model.Field(b => b.Title).Editable(true);
            model.Field(b => b.Author).Editable(true);
            model.Field(b => b.Genre).Editable(true);
            model.Field(b => b.Price).Editable(true);
            model.Field(b => b.Stock).Editable(true);
            model.Field(b => b.CategoryId).Editable(true);
            model.Field(b => b.CoverImage).Editable(true);
        })
        .Read(read => read.Action("GetBooks", "Book").Type(HttpVerbs.Get))
        .Create(create => create.Action("CreateBook", "Book").Type(HttpVerbs.Post))
        .Update(update => update.Action("UpdateBook", "Book"))
        .Destroy(destroy => destroy.Action("DeleteBook", "Book"))
        .ServerOperation(false) // Disable server operations if not needed
    )
)

@section Scripts {
    <script>
        var allSubCategories = @Html.Raw(Json.Serialize(((IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"] ?? new List<telerik.Models.BookCategory>()).Where(c => c.ParentId != null).Select(c => new { c.Id, c.Name, c.ParentId })));
        var parentCategories = @Html.Raw(Json.Serialize(((IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"] ?? new List<telerik.Models.BookCategory>()).Where(c => c.ParentId == null).Select(c => new { c.Id, c.Name })));

        function getCategoryName(id) {
            var match = parentCategories.find(c => c.Id === id);
            return match ? match.Name : "";
        }

        function onEdit(e) {
            setTimeout(function () {
                if (typeof initBookPopUp === 'function') {
                    initBookPopUp(allSubCategories);
                }
            }, 100);
        }

        $(document).ready(function () {
            var grid = $("#bookGrid").data("kendoGrid");
            if (grid) {
                grid.bind("edit", onEdit);
                grid.bind("dataBound", function(e) {
                    console.log("Data bound, books:", e.sender.dataSource.data());
                });
            } else {
                console.log("Kendo Grid 'bookGrid' not initialized yet.");
            }
        });
    </script>
}