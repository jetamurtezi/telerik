@section Scripts {
    <script>
        var allSubCategories = @Html.Raw(Json.Serialize(((IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"] ?? new List<telerik.Models.BookCategory>()).Where(c => c.ParentId != null).Select(c => new { c.Id, c.Name, c.ParentId })));
        var parentCategories = @Html.Raw(Json.Serialize(((IEnumerable<telerik.Models.BookCategory>)ViewData["Categories"] ?? new List<telerik.Models.BookCategory>()).Where(c => c.ParentId == null).Select(c => new { c.Id, c.Name })));

        function getCategoryName(id) {
            var match = parentCategories.find(c => c.Id === id);
            return match ? match.Name : "";
        }
        
       function onEdit(e) {
            if (typeof initBookPopUp === 'function') {
                initBookPopUp(allSubCategories);
            }

    var uploader = e.container.find("[data-role='upload']").data("kendoUpload");
            if (uploader) {
                uploader.unbind("success"); 
                uploader.bind("success", function (e) {
                    if (e.operation === "upload" && e.response && e.response.success) {
                        e.sender.wrapper.closest("form").find("input[name='CoverImage']").val(e.response.imageUrl);
                    }
                });
            }
        }


        $(document).ready(function () {
            var grid = $("#bookGrid").data("kendoGrid");
            if (grid) {
                grid.bind("edit", onEdit);
                grid.bind("dataBound", function(e) {
                    console.log("Data bound, books:", e.sender.dataSource.data());
                });
            } else {
                console.log("Kendo Grid 'bookGrid' not initialized yet.");
            }
        });
    </script>
}


@(
Html.Kendo().Grid<telerik.Models.Book>()
    .Name("bookGrid")
    .Columns(columns =>
    {
        columns.Bound(b => b.CoverImage)
            .Title("Foto")
            .ClientTemplate(
                "<img src='#= CoverImage #' alt='Foto' style='max-height:60px;' />" )
            .Width(100);
        columns.Bound(b => b.Title).Title("Titulli");
        columns.Bound(b => b.Author).Title("Autori");
        columns.Bound(b => b.Genre).Title("Zhanri");
        columns.Bound(b => b.CategoryId)
            .Title("Gjuha")
            .ClientTemplate("#= getCategoryName(CategoryId) #");
        columns.Bound(b => b.Price).Title("Çmimi");
        columns.Bound(b => b.Stock).Title("Sasia");
        columns.Bound(b => b.InStock).Title("Disponueshmeria");
        columns.Command(command =>
        {
            command.Edit().Text("Edito");
            command.Destroy().Text("Fshi");
        }).Title("Veprime").Width(180);
    })
    .ToolBar(toolbar => {
        toolbar.Create().Text(" SHTO LIBËR").HtmlAttributes(new { @class = "light-blue-btn" });
        })
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("BookPopUp"))
    .Events(e => e.Edit("onEdit"))
    .Pageable()
    .Sortable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Model(model => {
            model.Id(b => b.Id);
        })
        .Read(read => read.Action("GetBooks", "Book").Type(HttpVerbs.Get))
        .Create(create => create.Action("CreateBook", "Book").Type(HttpVerbs.Post))
        .Update(update => update.Action("UpdateBook", "Book"))
        .Destroy(destroy => destroy.Action("DeleteBook", "Book"))
        .ServerOperation(false) 
    )
)

